/*------------------------------------*\
    # LOADER
\*------------------------------------*/

// custom configurable loading animation
// TODO: could do with some refactoring 

$loader-border-width:           6px;
$loader-size:                   32px;
$loader-size--large:            60px;
$loader-border-opacity--white:  0.2;
$loader-border-opacity--green:  0.05;
// $base-border-opacity:   0.05;
// $multiplication-factor: 1.5;
$base-rotation:                 45deg;

// sass-map for circle rotations
$circle-data: (
    "-deg11-25":   11.25,
    "-deg22-5":    22.5,
    "-deg33-75":   33.75,
    "-deg45":      45,
    "-deg56-25":   56.25,
    "-deg67-5":    67.5,
    "-deg78-75":   78.75,
    "-deg90":      90,
    "-deg101-25":  101.25,
    "-deg112-5":   112.5,
    "-deg123-75":  123.75,
    "-deg135":     135,
    "-deg146-25":  146.25,
    "-deg157-5":   157.5,
    "-deg168-75":  168.75,
    "-deg180":     180
);

// $opacity-list: 11 10 9 8 7 6 5 4 3 2 1;

// mixin to build circle classes
@mixin build-circle-class( $class, $rotation ) {
    &.#{$class} {
        @include transform( rotate( $base-rotation + $rotation ) );
    }
}

// loader__wrap provides the ability to 
// set an arbitrary size for loader by 
// setting a specific width and height 
// and adding a modifier class of 
// ".-fill-parent" to ".loader__container"
// the dimensions of loader__wrap must be 
// the same e.g. "width: 100px; height: 100px"
.loader__wrap {
    position: relative;
    margin: 0 auto;

    &.-large {
        width: 100px;
        height: 100px;
    }
}
    
    // loader__container sets the initial size for 
    // the loader, either fixed or a percentage
    // use a modifier class of ".-fill-parent" to 
    // set the size to match its parent
    .loader__container {
        width: $loader-size;
        height: $loader-size;
        @include scut-center-block;

        &.is-hidden {
            display: none;
        }

        &.-large {
            width: $loader-size--large;
            height: $loader-size--large;
        }
        
        &.-fill-parent {
            width: 100%;
            height: 100%;
        }

        &.-pad-sml {
            padding: 5%;
        }

        &.-pad-med {
            padding: 10%;
        }

        &.-pad-lrg {
            padding: 20%;
        }
    }

        .loader {
            width: 100%;
            height: 100%;
            // @include animation-name(loader);
            @include animation-duration(.7s);
            @include animation-timing-function(linear);
            @include animation-iteration-count(infinite);
            @include scut-center-transform(y);
            margin: auto;
            position: relative;
        }

        @include keyframes(loader) {
            0% {
                @include transform( translateY(-50%) rotate(0deg) );
            }
            100% {
                @include transform( translateY(-50%) rotate(360deg) );
            }
        }

            .loader__mask {
                position: absolute;
                width: 50%;
                height: 100%;
                overflow: hidden;

                &.-left {
                    left: 0;
                }

                &.-right {
                    right: 0;
                }
            }
                
                .loader__circles {
                    position: absolute;
                    width: 200%;
                    height: 100%;

                    .loader__mask.-right & {
                        right: 0;
                    }
                }

                    .loader__circle {
                        position: absolute;
                        width: 100%;
                        height: 100%;   
                        border-radius: 100%;
                        border-width: 8px;
                        border-style: solid;
                        border-color: transparent;
                        border-top-color: rgba($green, $loader-border-opacity--green);
                        border-right-color: rgba($green, $loader-border-opacity--green);
                        @include transform( rotate(45deg) );

                        .loader__container.-white & {
                            border-top-color: rgba($white, $loader-border-opacity--white);
                            border-right-color: rgba($white, $loader-border-opacity--white);
                        }

                        .loader__container.-width-five &    { border-width: 5px;  }
                        .loader__container.-width-ten &     { border-width: 10px; }
                        .loader__container.-width-twenty &  { border-width: 20px; }
                        
                        // build circle rules from sass-map
                        @each $class, $rotation in $circle-data {
                            @include build-circle-class( $class, $rotation );
                        }
                    }

